package lambda;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

public class TestLambdaInCollection {

    public static void main(String[] args) {

        // consumer with single functional input
        Consumer<Integer> csm = i -> System.out.println("element: " + i);

        // consumer with double functional input
        BiConsumer<Integer, String> csm2 = (i, n) -> System.out.println("" + n + " element: " + i);

        // ** and, you DON'T have readily available consumer (from jdk) with > 2 input support ... **

        List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5, 6);  // list generated by Arrays.asList() is immutable!

//        lst.forEach(i -> System.out.println("lst element: " + i));
        lst.forEach(csm);
        lst.forEach(i -> csm2.accept(i, "List lst"));

        // create a mutable array list
        List<Integer> list2 = new ArrayList();
        lst.forEach(i -> list2.add(new Integer(i)));

        list2.sort((a, b) -> -1 * a.compareTo(b));  // reverse sort
        list2.forEach(i -> csm2.accept(i, "reverse sorted list2"));

        list2.removeIf(i -> i > 3);
        list2.forEach(i -> csm2.accept(i, "filtered list2"));

        list2.replaceAll(i -> i * 10);
        list2.forEach(i -> csm2.accept(i, "replaced list2"));


    }


}
