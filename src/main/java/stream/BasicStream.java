package stream;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Consumer;
import java.util.stream.Stream;

public class BasicStream {

    public static void main(String[] args) {

        Consumer<Integer> csm = i -> System.out.println("print integer: " + i);

        List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5, 6);  // list generated by Arrays.asList() is immutable!

        lst.forEach(i -> csm.accept(i));
        // above statement is equivalent to below
        lst.forEach(csm);

        // Stream operations donâ€™t mutate their source. Instead, they return new streams that hold the result
        Stream<Integer> s = lst.stream();
        s.filter(i -> i > 3).forEach(csm); // forEach can work on stream directly

        // a stream can be traversed only once
        try {
            s.forEach(System.out::println);
        } catch (java.lang.IllegalStateException e) {
            System.out.println("caught exception: " + e.getMessage());
        }

        // parallelStream

        Stream<Integer> iStrm = lst.parallelStream();
        // got Optional.empty
        Integer intResult = iStrm.filter(i -> i > 4).filter(i -> i < 3).findAny().orElse(-1);
        System.out.println(intResult);

        // use Stream class methods to build streams

        // Stream.of to build stream
        Stream.of("this is a sample text string".split(" "))
                .sorted().forEach(ss -> System.out.println("stream sort: " + ss));

        // Stream iterator to generate stream
        Stream.iterate(1, n -> n + n).limit(10)
                .forEach(i -> System.out.println("stream iterate: " + i));

        // Stream generator
        Stream.generate(() -> "hello").limit(3)
                .forEach(System.out::println);

        // generator is useful for generating random variables
        Stream.generate(() -> UUID.randomUUID()).limit(5).map((uuid) -> "UUID: " + uuid)
                .forEach(System.out::println);
    }

}
